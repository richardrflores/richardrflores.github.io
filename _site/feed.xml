<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Reprogram</title>
    <description>A blog about programming and software development by Richard Flores.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Thinking In Event Streams</title>
        <description>&lt;p&gt;In a previous post on &lt;a href=&quot;http://richardrflores.com/2017/05/08/event-sourcing.html&quot;&gt;event sourcing&lt;/a&gt;, I mentioned that there should be a compelling business need to use event sourcing, but how do we know it’s a suitable pattern? After talking to several colleagues I was introduced to the idea of thinking in event streams in order to figure out if event sourcing would be an appropriate given a new new project or adding to an existing solution. Jimmy Bogard commented on &lt;a href=&quot;https://lostechies.com/gabrielschenker/2015/05/26/event-sourcing-revisited/&quot;&gt;Event Sourcing Revisted&lt;/a&gt; by Gabriel Schekner, in response to this same question. His process is to determine whether the business (not the developers) thinks and models their problem as a series of events, as a way of deciding to use an event sourced system. If we’re lucky the business will think about and actually model their system as a series of events. They might recognize events in their domain, but I don’t think it’s likely they would have the technical expertise to model the system as a stream of events without input from technical experts familiar with design of event based systems. So it’s up to us, not only be able to recognize events in the domain, but to transform those thoughts into event streams. So how do we get there? We need to start thinking in event streams!&lt;/p&gt;

&lt;p&gt;How do we make the switch? The first part is knowing what an event is. I describe the essential characteristics &lt;a href=&quot;http://richardrflores.com/2017/05/24/essential-characteristics-of-domain-events.html&quot;&gt;here&lt;/a&gt;. Essentially and event is an effect resulting from some action. An important thing to recognize is that events describe non-trivial changes that occur in the domain. To illustrate, let’s look at an example from a billing application.&lt;/p&gt;

&lt;p&gt;When a charge is submitted to the system, then a charge is created. When a charge is created, then the system codes the charge. When the charge has been coded, then the system creates a journal entry. When a journal entry is created, then the system generates an invoice. When an invoice is created, then the system sends the customer an invoice.&lt;/p&gt;

&lt;p&gt;The process above is obviously a simple example, but we can guess that the domain at this point is a billing domain of some sort and we can see the non-trivial changes occurring in the domain as events:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ChargeCreated&lt;/li&gt;
  &lt;li&gt;ChargeCoded&lt;/li&gt;
  &lt;li&gt;JournalEntryCreated&lt;/li&gt;
  &lt;li&gt;InvoiceGenerated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I’ve actually described several events that can occur in the billing domain. However, the key thing to note when identifying events is the tense. Events are always past-tense and each one is potentially an event stream in the system.&lt;/p&gt;

&lt;p&gt;Another, less apparent event stream is a domain change that occurs on an entity in the past. For example, in a billing service, where a new fee must be calculated from a given volume of product and a daily market rate, when the daily rate changed. If we knew the rate to be a given amount on the day the fee was first calculated, but was in-fact supposed to be a different amount and not detected until some time after, then we are dealing with a bi-temporal domain (what actually occurred vs. what was known). So if you have a non-trivial event happening in the context of a bi-temporal domain, then this is probably another potential event stream in the system. In the case the source of the event stream would be the DailyRateChanged event. This change would certainly influence the calculation of the fee, in this case it would result in a new fee being generated all together.&lt;/p&gt;

&lt;p&gt;Ok, great. I’ve shown you how to identify events that can occur in a notional billing system. But what actually makes them event streams? The term ‘event stream’ comes from event stream processing, which is loosely defined as the process of analyzing a flow of event-based data as it’s created. However, in the context of event sourcing, there is more to it. Not only must the events (the history they represent) be core to the business, but replaying events should also be core to the business. If the history is core to the business, say for regulatory requirements, and if replaying the event streams provides behavior that will influence a change to the domain, such as the case in the second example above, then I would say you have a legitimate event stream, thus a good case for event sourcing, but both elements should be present. Using event sourcing, for purely non-functional reasons (requirements), without buy-in from the business, delegitimizes the event stream and not a good case for using event sourcing in my opinion.&lt;/p&gt;

&lt;p&gt;In closing, what I’ve described in this post is “a way” to start thinking in event streams as a way to determine if event sourcing is a suitable pattern. We should be able to identify key events that are important to the business and transform them into event streams. However, the business should ultimately decide if the history of events and the need to replay them is core to the business. If so, then we have a legitimate event stream and a good case for using event sourcing. Once you have determined that event sourcing is an appropriate solution then you can use a more formal way of identifying events, called Event Storming which is a group modeling technique that involves all the key stakeholders, including the business. Checkout Alberto Ziobrando’s introduction to event-based modeling: &lt;a href=&quot;http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html&quot;&gt;Introducing Event Storming&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Anything I might have missed? Any additional insights from interactions with stakeholders? If so, please share in the comments. I’d like to know more.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jul 2017 08:15:19 -0500</pubDate>
        <link>http://localhost:4000/2017/07/15/thinking-in-event-streams.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/15/thinking-in-event-streams.html</guid>
      </item>
    
      <item>
        <title>Essential Characteristics Of Domain Events</title>
        <description>&lt;p&gt;In my post on &lt;a href=&quot;http://richardrflores.com/2017/05/08/event-sourcing.html&quot;&gt;event sourcing&lt;/a&gt;, I briefly described event sourcing and touched on appropriate usages. I’m planning on writing some more about usages, but for now I wanted to share my notes on the fundamental thing we are dealing with when using event sourcing—Events.&lt;/p&gt;

&lt;p&gt;The essential characteristics of events are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;They occur in the past are typically emitted from an aggregate in response to an action. In the case of a ShoppingCart, “ItemAdded”, “ItemRemoved”.&lt;/li&gt;
  &lt;li&gt;They are immutable. Since domain events are a record of a change occurring in the past, they cannot be changed or undone. Subsequent events can alter or reverse the state of the domain. Such as “OrderModified”, or “OrderCanceled”.&lt;/li&gt;
  &lt;li&gt;Events are one way. Events can only be emitted (published) from a single source. There can be multiple subscribers to an event.&lt;/li&gt;
  &lt;li&gt;Events should contain information about the event, such as a key identifying the source of the event, and any additional information relative to the domain.&lt;/li&gt;
  &lt;li&gt;Events should describe the intent of the business beyond the name of the event. For example, “Order 1000 was created by customer jsmith”.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 24 May 2017 04:24:00 -0500</pubDate>
        <link>http://localhost:4000/2017/05/24/essential-characteristics-of-domain-events.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/24/essential-characteristics-of-domain-events.html</guid>
      </item>
    
      <item>
        <title>Event Sourcing</title>
        <description>&lt;p&gt;I recently took an interest in CQRS (Command Query Responsibility Segregation) to learn how it’s used with DDD (Domain Driven Design) for a project I’m working on. CQRS is an architectural pattern that separates a system into two distinct parts, which either changes the state of the system or reads its current state. While on my CQRS journey, I came across several articles and posts which covered Event Sourcing (ES). This was really interesting to me so went in a little deeper to get a better understanding. Here’s what I know.&lt;/p&gt;

&lt;p&gt;ES is an architectural pattern where events describing the state of a domain are persisted. The events are saved to an event log, known as an Event Store, which is an archive of the actions in the system. The event log can be queried to determine the current state of a domain. Events can also be reconstructed to determine the past states. This is the primary advantage of ES. Also systems using event sourcing are capable of higher throughput since changes to entities are persisted asynchronously. This is another advantage of ES.&lt;/p&gt;

&lt;p&gt;A word of caution: There should be a compelling business need to use ES! ES is not suitable for CRUD applications where the business logic is primarily concerned with operating on the current state of the domain. ES is better suited for domains with rich business logic that are fairly complex in nature, such as a temporal domain that is sensitive to history. Ultimately, the need to replay history should be core to the business logic.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 May 2017 04:58:00 -0500</pubDate>
        <link>http://localhost:4000/2017/05/08/event-sourcing.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/08/event-sourcing.html</guid>
      </item>
    
      <item>
        <title>How I Get Things Done...Now</title>
        <description>&lt;p&gt;After getting through a bulk of the GTD book, the idea of clearing your mind is something that resonated with me and motivated me to try it again; albeit with some minor improvements.&lt;/p&gt;

&lt;p&gt;With a fundamental understanding of “why” and clearer understanding of the workflow, this is how I’m getting things done now:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I’m still using Evernote (no change here) because it is super easy to funnel everything I eventually come in contact with into a single point - the Inbox.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I created a Reference notebook and moved all the notes from the role based notebooks into the Reference notebook. I deleted all the role based notebooks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I renamed the !Focus notebook I had previously, to “Next Actions”, with the understanding that I will check this notebook frequently (as prescribed by David Allen) and perform those actions asap.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I use the Waiting and Someday/Maybe notebooks as prescribed by David Allen (nothing special here).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Projects. This time around I have broken out Projects into three categories (notebook stacks in Evernote):&lt;/p&gt;

    &lt;p&gt;i. Projects (In-Progress)&lt;/p&gt;

    &lt;p&gt;ii. Projects (Someday/Maybe)&lt;/p&gt;

    &lt;p&gt;iii. Projects (Complete)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/content/site/images/evernote.png&quot; alt=&quot;Getting Things Done in Evernote&quot; title=&quot;Getting Things Done in Evernote&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More on Projects. This is one I had to think about and I may tweak if it becomes to much trouble to manage. The idea is to have a Notebook dedicated to a specific project, where I can have multiple notes for each project. There will be one note that describes the project (purpose, desired outcome, next actions and brainstorming). The other notes will be actions I need to take on the project or reference material such as documents, pictures, etc. I then tag the notes as either ToDo, Done or Reference.&lt;/p&gt;

&lt;p&gt;I thought about only having one notebook to track projects, with one note for each project, and spawning off action notes, which I would then funnel to the Next Actions notebook, but decided not to for the following reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;As I understand it, the idea of Next Actions is to complete them casually, or as the situation or time permits. This may not be optimal for projects. Actions for projects should be completed with some rigor. This requires actions to either be scheduled or to use Ticklers to remind you when or where something should be completed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Funneling project actions to Next Actions can inundate your Next Actions box. Even if you are using ticklers, this adds noise and forces you to prioritize things that might not be as important.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My workflow for Next Actions is to trash the item when I am done, unless there is something attached that I want to reference for later. Sending notes to trash breaks the context of the project, which would not make it useful for future reference. Even if I referenced these items and put them in the Reference folder upon completion, then I would have to use tags or links to string the project together. This could work, but results in more work and potentially another system that can break down.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m still on the fence about whether or not my project system is sustainable. For now, there are two things I think are extremely important to make the project system I described above work:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Decide on which projects you will be actively working on. Move all others to the Projects (Someday/Maybe) notebook.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You must review your projects during Weekly Planning and plan accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do only one action at a time. All your actions should be in ToDo or Done.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make effective use of Ticklers. Evernote has the ability to set reminders. If you are not using Evernote, then use your calendar, email or a reminder list to remind you when something should be done.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use Next Actions if it makes sense, just be sure to put your note back to your project notebook when you are done so you don’t lose the context.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One thing worth mentioning: It is absolutely critical to make a habit out of weekly planning. This is the time to catch anything you might have missed earlier in the week, review your projects/goals and plan for the week ahead. If you know you won’t be able to make your planning event, the plan ahead and schedule it a time more convenient for yourself. Not making this a habit will cause your trusted system to collapse.&lt;/p&gt;

&lt;p&gt;Anyway, I hope this helps. I certainly don’t think I have it all figured out, but I’m pretty confident this will work and be sustainable (for me). I look forward to hearing what you think.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 May 2017 04:54:00 -0500</pubDate>
        <link>http://localhost:4000/2017/05/01/how-i-get-things-done-now.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/01/how-i-get-things-done-now.html</guid>
      </item>
    
      <item>
        <title>How Not to Get Things Done</title>
        <description>&lt;p&gt;Last month I started an advanced business training program through my employer. It’s a 13 week program that includes several modules on various topics. One of the topics we covered is on &lt;a href=&quot;http://www.inc.com/lee-colan/manage-attention-not-time.html&quot;&gt;Attention Management&lt;/a&gt;. This was a really interesting topic and required reading a couple of articles on the subject and David Allen’s &lt;a href=&quot;https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0143126563/ref=dp_ob_title_bk&quot;&gt;Getting Things Done&lt;/a&gt; (GTD).&lt;/p&gt;

&lt;p&gt;One of our assignments for this module was to describe how we would use GTD. As I began to describe my system, I could not help but think about why it didn’t work for me in the past. I was actually familiar with GTD and used it in the past, but eventually stopped because it was a lot to keep up with and I was not really getting much benefit from it. And, here’s why.&lt;/p&gt;

&lt;p&gt;I initially found out about GTD through Stephen Covey’s 7 Habits book. In hindsight there were several things that made my previous GTD system cumbersome and difficult to use:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I looked up articles and read about how other people were using GTD. I never read the book so my knowledge was limited to how people implemented the system and I didn’t have fundamental understanding of “why”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I incorporated Stephen Covey’s concept of the roles you play in your life and planning your activities around these roles. I used Evernote and created a notebook for each role. As you can imagine, I had several notebooks and eventually weekly planning turned-into a 2-3 hour event. Even though I was being proactive, I did not feel it was an effective use of my time because it was so painful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I never created a habit of daily and weekly planning. Daily planning is often difficult because I either forget, or my mornings are often very fluid which made set planning time very difficult. This was really problematic because I was not consistently checking my calendar and missing things. And as I mentioned above, weekly planning became an arduous event.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I used the Covey’s concept of Focus items inefficiently. With all the roles I was playing, this bucket would fill quickly, and it was almost impossible to focus on all the actions there in one day, so I would revert to a separate hand-written list to work through the noise; essentially defeating the purpose of the Focus bucket.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I did not have an effective decision making system. As I added things to my system, I would apply them to the role which they were applicable. This was not effective because it required too much thought. I had to decide what bucket to put it in, if I needed to tag it so I can find it later and what tag to use. The decision process was inconvenient and sometimes painful.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I did not have an effective Reference system. Because I was relying on roles and tags to organize my things, my notes were all over the place. The lack of having an effective reference system also made the decision process harder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I did not have an effective Project system. Many of my projects were organized by role. Going through each one to plan and organize effectively became difficult over time especially when I had to prioritize which role to focus on. Eventually this system broke down because I would often neglect the buckets that were not in the whirlwind.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not getting Inbox to zero. As my systems decision, reference and project planning systems broke down, my Inbox grew out of control. I would sweep through every now and then, but it would quickly fill up and they cycle would resume.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Eventually I had a complete breakdown of the system and I abandoned it, opting instead to just periodically check my calendar (when I remembered to) and maintain a hand-written list and reminders on my phone.&lt;/p&gt;

&lt;p&gt;Now that I have a fundamental understanding of GTD, I have decided to give it another shot. David Allen presents the idea of keeping your mind clear so you can focus your attention on what is important. This resonated with me and motivated me to make this work. I will describe my system the changes I’ve made to make this work on my next post.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Feb 2017 03:30:00 -0600</pubDate>
        <link>http://localhost:4000/2017/02/13/how-not-get-things-done.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/13/how-not-get-things-done.html</guid>
      </item>
    
      <item>
        <title>Why I got a MBA</title>
        <description>&lt;p&gt;The last year and a half I’ve been working on completing an MBA. And, as of May 2016, I am the proud recipient of a MBA from Webster University George Herbert Walker School of Business!&lt;/p&gt;

&lt;p&gt;When I mentioned to people that I was going to school for a MBA, I would often be asked, “why?” Especially considering that I’m a software developer.&lt;/p&gt;

&lt;p&gt;Why I got a MBA.&lt;/p&gt;

&lt;p&gt;I initially got the idea to purse a graduate degree to be competitive for promotions when I was in the military. I decided on a MBA because my undergrad was in Information Systems Technology and I really wanted to do something different. Actually, I could have got a MA in Information Technology in about half the time using credit I had received for advanced training in the military, but thought the MBA was more widely applicable and thus more beneficial in the long run.&lt;/p&gt;

&lt;p&gt;Another reason, I figured it would be helpful landing my dream job of becoming a CIO or some kind of C-level executive in IT. This was not just wishful thinking either. Based on research I had done and from what I new of other successful CIOs, getting some proper business acumen under my belt was extremely important.&lt;/p&gt;

&lt;p&gt;And finally, another reason was to obtain the knowledge and credentials to start my own business one day. A MBA is by no means necessary, but the business acumen is very important (for me anyway). This is especially true when it comes to financing.&lt;/p&gt;

&lt;p&gt;Anyway, this is why I got a MBA. It was a lot of hard work, but very gratifying in the end. I’m glad I did it.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 04:25:00 -0500</pubDate>
        <link>http://localhost:4000/2016/09/26/why-i-got-an-mba.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/26/why-i-got-an-mba.html</guid>
      </item>
    
      <item>
        <title>SignalR Fundamentals Talk</title>
        <description>&lt;p&gt;I had the pleasure of a giving a talk to the Houston Dot Net User Group yesterday evening about fundamental concepts related to SignalR. I had a really good time, thanks to all in attendance!&lt;/p&gt;

&lt;p&gt;Below are the links to the code and the slides.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/richardrflores/SignalRChat&quot;&gt;Demos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/49013288/SignalR%20Talk&quot;&gt;Presenation&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Jun 2015 03:00:00 -0500</pubDate>
        <link>http://localhost:4000/2015/06/12/signalr-fundamentals-talk-hdnug.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/06/12/signalr-fundamentals-talk-hdnug.html</guid>
      </item>
    
      <item>
        <title>EF Table Per Hierarchy (TPH) IsNull = False Error</title>
        <description>&lt;p&gt;Today I had to refactor some domain models to a generalized hierarchy with EF. I used the TPH pattern defined by the EF team to split a JournalEntryHeader into a BillingRecordJournalEntryHeader and an InvoiceJournalEntryHeader in order to secure the domain models using the projects data entitlements paradigm.&lt;/p&gt;

&lt;p&gt;Not so fast!&lt;/p&gt;

&lt;p&gt;I hit a couple of blocks. The main reason is that we were trying to use two different discriminator columns. I kept getting a “IsNull=False” error. Although syntactically it was implemented correctly, it did not work. I then tried to use a type property that we have that actually would have worked better, but I ran into the same problem. This was troubling because we have this working somewhere else in the solution…More on that later.&lt;/p&gt;

&lt;p&gt;A few things I discovered:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The EF mapping configuration Map method takes either a string to map the property or a lambda.&lt;/li&gt;
  &lt;li&gt;If using the string, then the HasValue method must specify a value to use as a discriminator. If using the lambda, then you must use the HasValue method; in this case the HasValue does not require you to specify a discriminator value; I assume you could use a predicate to check against in the lambda.&lt;/li&gt;
  &lt;li&gt;Using the lambda syntax, you cannot use an enum as the property to discriminate because EF will try to convert the value to primitive type, which throws an exception. If your discriminator is an enum then use the string syntax.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After several iterations and several searches, I realized that the error was the result of using a mapped property as a discriminator. This seemed to be the most common issue others experienced; this usage does not appear to be supported. As I mentioned earlier, we have this working somewhere else. After reviewing that implementation, I noticed that the property being used as a discriminator is not  defined on the super class of the implementing class; instead, it’s defined one more level up. Since it’s not acting as a property and discriminator on the super class, then EF does not seem to care.&lt;/p&gt;

&lt;p&gt;Ultimately, I added another property to use only as a discriminator.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Mar 2015 15:00:00 -0500</pubDate>
        <link>http://localhost:4000/2015/03/25/ef-table-per-hierarchy-is-null-false.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/03/25/ef-table-per-hierarchy-is-null-false.html</guid>
      </item>
    
      <item>
        <title>Coercion of types (soft casting)</title>
        <description>&lt;p&gt;Today a colleague of mine used the word “coercion” when referring to a soft cast in code. Some thoughts I captured about this.&lt;/p&gt;

&lt;p&gt;Hard cast vs soft cast or coercion vs. explicit casting. In C# this is the difference between using:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Hard cast    
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;casted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;castMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Soft cast
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;softCast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;castMe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Wed, 18 Mar 2015 09:30:00 -0500</pubDate>
        <link>http://localhost:4000/2015/03/18/coercion-of-types-soft-casting.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/03/18/coercion-of-types-soft-casting.html</guid>
      </item>
    
      <item>
        <title>Demon hunter level 12</title>
        <description>&lt;p&gt;Warnings in code. Use warnings in code when a challenging section of code has been implemented. Should be in a comment banner and say something like…”If you are not do not have these skills (Demon hunter level 12) then you should probably not be modifying this code!”&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Mar 2015 09:14:00 -0500</pubDate>
        <link>http://localhost:4000/2015/03/18/demon-hunter-level-12.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/03/18/demon-hunter-level-12.html</guid>
      </item>
    
  </channel>
</rss>
